apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    signingConfigs {
        release {
            storePassword 'release'
            keyAlias = 'release'
            keyPassword 'release'
            storeFile file('/Users/arnaudgiuliani/workspace/weatherapp/release.jks')
        }
    }
    compileSdkVersion rootProject.ext.compile_sdk_version

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion rootProject.ext.target_sdk_version
        applicationId "com.weatherapp"
        versionCode 1
        versionName "1.0"

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }

        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'

        // used by Room, to test migrations
        androidTest.assets.srcDirs +=
                files("$projectDir/schemas".toString())
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Android Support
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'

    // Android Support UI
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // Firebase Analytics
    implementation 'com.google.firebase:firebase-core:16.0.7'

    // Crashlytics
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    // Android Test
    testImplementation "io.mockk:mockk:1.9.3"
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestUtil 'androidx.test:orchestrator:1.1.0'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation ("com.squareup.moshi:moshi-kotlin:$moshi_version") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-reflect'
    }

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Anko
    implementation "org.jetbrains.anko:anko-commons:$anko_version"

    // Koin
    implementation "org.koin:koin-androidx-ext:$koin_version"
    testImplementation "org.koin:koin-test:$koin_version"
    androidTestImplementation "org.koin:koin-test:$koin_version"

    // UniFlow
    implementation "io.uniflow:uniflow-androidx:$uniflow_version"
    implementation "io.uniflow:uniflow-saferesult:$uniflow_version"
    testImplementation "io.uniflow:uniflow-test:$uniflow_version"
    testImplementation "io.uniflow:uniflow-androidx-test:$uniflow_version"

    // ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.0.0'
    testImplementation 'androidx.arch.core:core-testing:2.0.1'

    // Room
    implementation 'androidx.room:room-runtime:2.1.0'
    kapt 'androidx.room:room-compiler:2.1.0'
    annotationProcessor 'androidx.room:room-compiler:2.1.0'
    testImplementation 'androidx.room:room-testing:2.1.0'

    // Networking
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$retrofit_coroutines_version"

    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // UI
    implementation 'com.joanzapata.iconify:android-iconify-weathericons:2.2.2'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.2'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = '1.8'
        apiVersion = '1.3'
        languageVersion = '1.3'
        freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
    }
}